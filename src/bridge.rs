/* automatically generated by rust-bindgen */

#![allow(improper_ctypes)]

/// These are interface-only types with provided API
///  You should use them only by pointer
pub struct Unit;
pub struct UnitCommand;
pub struct Player;
pub struct Region;
pub struct Force;
pub struct Bullet;
/// These are value-only structs with no API
///  You should implement API on your own
#[repr(C)]
#[derive(Copy)]
pub struct Race {
    pub id: ::std::os::raw::c_int,
}
impl Clone for Race {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Order {
    pub id: ::std::os::raw::c_int,
}
impl Clone for Order {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct UnitType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for UnitType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct PlayerType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for PlayerType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct WeaponType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for WeaponType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct TechType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for TechType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct UpgradeType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for UpgradeType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct UnitCommandType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for UnitCommandType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct BulletType {
    pub id: ::std::os::raw::c_int,
}
impl Clone for BulletType {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Color {
    pub color: ::std::os::raw::c_int,
}
impl Clone for Color {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct Position {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl Clone for Position {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct TilePosition {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl Clone for TilePosition {
    fn clone(&self) -> Self { *self }
}
pub struct String;
extern "C" {
    pub fn Player_getID(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getName(self_: *mut Player) -> *mut String;
}
extern "C" {
    pub fn Player_getRace(self_: *mut Player) -> Race;
}
extern "C" {
    pub fn Player_getType(self_: *mut Player) -> PlayerType;
}
extern "C" {
    pub fn Player_getForce(self_: *mut Player) -> *mut Force;
}
extern "C" {
    pub fn Player_isAlly(self_: *mut Player, player: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_isEnemy(self_: *mut Player, player: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_isNeutral(self_: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_getStartLocation(self_: *mut Player) -> TilePosition;
}
extern "C" {
    pub fn Player_isVictorious(self_: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_isDefeated(self_: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_leftGame(self_: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_minerals(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_gas(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_gatheredMinerals(self_: *mut Player)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_gatheredGas(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_repairedMinerals(self_: *mut Player)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_repairedGas(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_refundedMinerals(self_: *mut Player)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_refundedGas(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_spentMinerals(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_spentGas(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_supplyTotal(self_: *mut Player, race: Race)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_supplyUsed(self_: *mut Player, race: Race)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_allUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_visibleUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_completedUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_incompleteUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_deadUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_killedUnitCount(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getUpgradeLevel(self_: *mut Player, upgrade: UpgradeType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_hasResearched(self_: *mut Player, tech: TechType) -> bool;
}
extern "C" {
    pub fn Player_isResearching(self_: *mut Player, tech: TechType) -> bool;
}
extern "C" {
    pub fn Player_isUpgrading(self_: *mut Player, upgrade: UpgradeType)
     -> bool;
}
extern "C" {
    pub fn Player_getColor(self_: *mut Player) -> Color;
}
extern "C" {
    pub fn Player_getTextColor(self_: *mut Player) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn Player_maxEnergy(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_topSpeed(self_: *mut Player, unit: UnitType) -> f64;
}
extern "C" {
    pub fn Player_weaponMaxRange(self_: *mut Player, weapon: WeaponType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_sightRange(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_weaponDamageCooldown(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_armor(self_: *mut Player, unit: UnitType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_damage(self_: *mut Player, wpn: WeaponType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getUnitScore(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getKillScore(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getBuildingScore(self_: *mut Player)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getRazingScore(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_getCustomScore(self_: *mut Player) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_isObserver(self_: *mut Player) -> bool;
}
extern "C" {
    pub fn Player_getMaxUpgradeLevel(self_: *mut Player, upgrade: UpgradeType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Player_isResearchAvailable(self_: *mut Player, tech: TechType)
     -> bool;
}
extern "C" {
    pub fn Player_isUnitAvailable(self_: *mut Player, unit: UnitType) -> bool;
}
extern "C" {
    pub fn Player_hasUnitTypeRequirement(self_: *mut Player, unit: UnitType,
                                         amount: ::std::os::raw::c_int)
     -> bool;
}
extern "C" {
    pub fn Unit_getID(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_exists(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_getReplayID(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getPlayer(self_: *mut Unit) -> *mut Player;
}
extern "C" {
    pub fn Unit_getType(self_: *mut Unit) -> UnitType;
}
extern "C" {
    pub fn Unit_getPosition(self_: *mut Unit) -> Position;
}
extern "C" {
    pub fn Unit_getTilePosition(self_: *mut Unit) -> TilePosition;
}
extern "C" {
    pub fn Unit_getAngle(self_: *mut Unit) -> f64;
}
extern "C" {
    pub fn Unit_getVelocityX(self_: *mut Unit) -> f64;
}
extern "C" {
    pub fn Unit_getVelocityY(self_: *mut Unit) -> f64;
}
extern "C" {
    pub fn Unit_getRegion(self_: *mut Unit) -> *mut Region;
}
extern "C" {
    pub fn Unit_getLeft(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getTop(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getRight(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getBottom(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getHitPoints(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getShields(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getEnergy(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getResources(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getResourceGroup(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getDistance_Position(self_: *mut Unit, target: Position)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getDistance_Unit(self_: *mut Unit, target: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_hasPath_Position(self_: *mut Unit, target: Position) -> bool;
}
extern "C" {
    pub fn Unit_hasPath_Unit(self_: *mut Unit, target: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_getLastCommandFrame(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getLastCommand(self_: *mut Unit) -> *mut UnitCommand;
}
extern "C" {
    pub fn Unit_getLastAttackingPlayer(self_: *mut Unit) -> *mut Player;
}
extern "C" {
    pub fn Unit_getInitialType(self_: *mut Unit) -> UnitType;
}
extern "C" {
    pub fn Unit_getInitialPosition(self_: *mut Unit) -> Position;
}
extern "C" {
    pub fn Unit_getInitialTilePosition(self_: *mut Unit) -> TilePosition;
}
extern "C" {
    pub fn Unit_getInitialHitPoints(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getInitialResources(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getKillCount(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getAcidSporeCount(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getInterceptorCount(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getScarabCount(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getSpiderMineCount(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getGroundWeaponCooldown(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getAirWeaponCooldown(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getSpellCooldown(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getDefenseMatrixPoints(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getDefenseMatrixTimer(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getEnsnareTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getIrradiateTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getLockdownTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getMaelstromTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getOrderTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getPlagueTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getRemoveTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getStasisTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getStimTimer(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getBuildType(self_: *mut Unit) -> UnitType;
}
extern "C" {
    pub fn Unit_getTech(self_: *mut Unit) -> TechType;
}
extern "C" {
    pub fn Unit_getUpgrade(self_: *mut Unit) -> UpgradeType;
}
extern "C" {
    pub fn Unit_getRemainingBuildTime(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getRemainingTrainTime(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getRemainingResearchTime(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getRemainingUpgradeTime(self_: *mut Unit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getBuildUnit(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getTarget(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getTargetPosition(self_: *mut Unit) -> Position;
}
extern "C" {
    pub fn Unit_getOrder(self_: *mut Unit) -> Order;
}
extern "C" {
    pub fn Unit_getSecondaryOrder(self_: *mut Unit) -> Order;
}
extern "C" {
    pub fn Unit_getOrderTarget(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getOrderTargetPosition(self_: *mut Unit) -> Position;
}
extern "C" {
    pub fn Unit_getRallyPosition(self_: *mut Unit) -> Position;
}
extern "C" {
    pub fn Unit_getRallyUnit(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getAddon(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getNydusExit(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getPowerUp(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getTransport(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getSpaceRemaining(self_: *mut Unit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Unit_getCarrier(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_getHatchery(self_: *mut Unit) -> *mut Unit;
}
extern "C" {
    pub fn Unit_hasNuke(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isAccelerating(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isAttacking(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isAttackFrame(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBeingConstructed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBeingGathered(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBeingHealed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBlind(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBraking(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isBurrowed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isCarryingGas(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isCarryingMinerals(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isCloaked(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isCompleted(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isConstructing(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isDefenseMatrixed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isDetected(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isEnsnared(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isFlying(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isFollowing(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isGatheringGas(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isGatheringMinerals(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isHallucination(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isHoldingPosition(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isIdle(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isInterruptible(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isInvincible(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isInWeaponRange(self_: *mut Unit, target: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isIrradiated(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isLifted(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isLoaded(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isLockedDown(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isMaelstrommed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isMorphing(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isMoving(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isParasited(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isPatrolling(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isPlagued(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isRepairing(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isResearching(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isSelected(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isSieged(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isStartingAttack(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isStasised(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isStimmed(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isStuck(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isTraining(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isUnderAttack(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isUnderDarkSwarm(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isUnderDisruptionWeb(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isUnderStorm(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isPowered(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isUpgrading(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_isVisible(self_: *mut Unit, player: *mut Player) -> bool;
}
extern "C" {
    pub fn Unit_isTargetable(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_issueCommand(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_attack_Position(self_: *mut Unit, target: Position,
                                shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_attack_Unit(self_: *mut Unit, target: *mut Unit,
                            shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_build(self_: *mut Unit, type_: UnitType, target: TilePosition)
     -> bool;
}
extern "C" {
    pub fn Unit_buildAddon(self_: *mut Unit, type_: UnitType) -> bool;
}
extern "C" {
    pub fn Unit_train(self_: *mut Unit, type_: UnitType) -> bool;
}
extern "C" {
    pub fn Unit_morph(self_: *mut Unit, type_: UnitType) -> bool;
}
extern "C" {
    pub fn Unit_research(self_: *mut Unit, tech: TechType) -> bool;
}
extern "C" {
    pub fn Unit_upgrade(self_: *mut Unit, upgrade: UpgradeType) -> bool;
}
extern "C" {
    pub fn Unit_setRallyPoint_Position(self_: *mut Unit, target: Position)
     -> bool;
}
extern "C" {
    pub fn Unit_setRallyPoint_Target(self_: *mut Unit, target: *mut Unit)
     -> bool;
}
extern "C" {
    pub fn Unit_move(self_: *mut Unit, target: Position,
                     shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_patrol(self_: *mut Unit, target: Position,
                       shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_holdPosition(self_: *mut Unit, shiftQueueCommand: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_stop(self_: *mut Unit, shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_follow(self_: *mut Unit, target: *mut Unit,
                       shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_gather(self_: *mut Unit, target: *mut Unit,
                       shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_returnCargo(self_: *mut Unit, shiftQueueCommand: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_repair(self_: *mut Unit, target: *mut Unit,
                       shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_burrow(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_unburrow(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cloak(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_decloak(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_siege(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_unsiege(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_lift(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_land(self_: *mut Unit, target: TilePosition) -> bool;
}
extern "C" {
    pub fn Unit_load(self_: *mut Unit, target: *mut Unit,
                     shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_unload(self_: *mut Unit, target: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_unloadAll(self_: *mut Unit, shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_unloadAll_Position(self_: *mut Unit, target: Position,
                                   shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_rightClick_Position(self_: *mut Unit, target: Position,
                                    shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_rightClick_Unit(self_: *mut Unit, target: *mut Unit,
                                shiftQueueCommand: bool) -> bool;
}
extern "C" {
    pub fn Unit_haltConstruction(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cancelConstruction(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cancelAddon(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cancelTrain(self_: *mut Unit, slot: ::std::os::raw::c_int)
     -> bool;
}
extern "C" {
    pub fn Unit_cancelMorph(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cancelResearch(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_cancelUpgrade(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_useTech_Position(self_: *mut Unit, tech: TechType,
                                 target: Position) -> bool;
}
extern "C" {
    pub fn Unit_useTech_Unit(self_: *mut Unit, tech: TechType,
                             target: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_placeCOP(self_: *mut Unit, target: TilePosition) -> bool;
}
extern "C" {
    pub fn Unit_canIssueCommand(self_: *mut Unit, command: *mut UnitCommand,
                                checkCanUseTechPositionOnPositions: bool,
                                checkCanUseTechUnitOnUnits: bool,
                                checkCanBuildUnitType: bool,
                                checkCanTargetUnit: bool,
                                checkCanIssueCommandType: bool,
                                checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canIssueCommandGrouped(self_: *mut Unit,
                                       command: *mut UnitCommand,
                                       checkCanUseTechPositionOnPositions:
                                           bool,
                                       checkCanUseTechUnitOnUnits: bool,
                                       checkCanTargetUnit: bool,
                                       checkCanIssueCommandType: bool,
                                       checkCommandibilityGrouped: bool,
                                       checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canCommand(self_: *mut Unit) -> bool;
}
extern "C" {
    pub fn Unit_canCommandGrouped(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canIssueCommandType(self_: *mut Unit, ct: UnitCommandType,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canIssueCommandTypeGrouped(self_: *mut Unit,
                                           ct: UnitCommandType,
                                           checkCommandibilityGrouped: bool,
                                           checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canTargetUnit(self_: *mut Unit, targetUnit: *mut Unit,
                              checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttack(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canAttack_Position(self_: *mut Unit, target: Position,
                                   checkCanTargetUnit: bool,
                                   checkCanIssueCommandType: bool,
                                   checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttack_Unit(self_: *mut Unit, target: *mut Unit,
                               checkCanTargetUnit: bool,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackGrouped(self_: *mut Unit,
                                 checkCommandibilityGrouped: bool,
                                 checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackGrouped_Position(self_: *mut Unit, target: Position,
                                          checkCanTargetUnit: bool,
                                          checkCanIssueCommandType: bool,
                                          checkCommandibilityGrouped: bool,
                                          checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackGrouped_Unit(self_: *mut Unit, target: *mut Unit,
                                      checkCanTargetUnit: bool,
                                      checkCanIssueCommandType: bool,
                                      checkCommandibilityGrouped: bool,
                                      checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackMove(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canAttackMoveGrouped(self_: *mut Unit,
                                     checkCommandibilityGrouped: bool,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackUnit(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canAttackUnit_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                                   checkCanTargetUnit: bool,
                                   checkCanIssueCommandType: bool,
                                   checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackUnitGrouped(self_: *mut Unit,
                                     checkCommandibilityGrouped: bool,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canAttackUnitGrouped_Unit(self_: *mut Unit,
                                          targetUnit: *mut Unit,
                                          checkCanTargetUnit: bool,
                                          checkCanIssueCommandType: bool,
                                          checkCommandibilityGrouped: bool,
                                          checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canBuild(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canBuild_UnitType(self_: *mut Unit, uType: UnitType,
                                  checkCanIssueCommandType: bool,
                                  checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canBuild_UnitType_TilePosition(self_: *mut Unit,
                                               uType: UnitType,
                                               tilePos: TilePosition,
                                               checkTargetUnitType: bool,
                                               checkCanIssueCommandType: bool,
                                               checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canBuildAddon(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canBuildAddon_UnitType(self_: *mut Unit, uType: UnitType,
                                       checkCanIssueCommandType: bool,
                                       checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canTrain(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canTrain_UnitType(self_: *mut Unit, uType: UnitType,
                                  checkCanIssueCommandType: bool,
                                  checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canMorph(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canMorph_UnitType(self_: *mut Unit, uType: UnitType,
                                  checkCanIssueCommandType: bool,
                                  checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canResearch(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canResearch_TechType(self_: *mut Unit, type_: TechType,
                                     checkCanIssueCommandType: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUpgrade(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUpgrade_UpgradeType(self_: *mut Unit, type_: UpgradeType,
                                       checkCanIssueCommandType: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyPoint(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyPoint_Position(self_: *mut Unit, target: Position,
                                          checkCanTargetUnit: bool,
                                          checkCanIssueCommandType: bool,
                                          checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyPoint_Unit(self_: *mut Unit, target: *mut Unit,
                                      checkCanTargetUnit: bool,
                                      checkCanIssueCommandType: bool,
                                      checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyPosition(self_: *mut Unit,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyUnit(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canSetRallyUnit_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                                     checkCanTargetUnit: bool,
                                     checkCanIssueCommandType: bool,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canMove(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canMoveGrouped(self_: *mut Unit,
                               checkCommandibilityGrouped: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canPatrol(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canPatrolGrouped(self_: *mut Unit,
                                 checkCommandibilityGrouped: bool,
                                 checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canFollow(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canFollow_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                               checkCanTargetUnit: bool,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canGather(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canGather_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                               checkCanTargetUnit: bool,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canReturnCargo(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canHoldPosition(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canStop(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRepair(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRepair_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                               checkCanTargetUnit: bool,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canBurrow(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUnburrow(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canCloak(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canDecloak(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canSiege(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUnsiege(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canLift(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canLand(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canLand_TilePosition(self_: *mut Unit, target: TilePosition,
                                     checkCanIssueCommandType: bool,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canLoad(self_: *mut Unit, checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canLoad_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                             checkCanTargetUnit: bool,
                             checkCanIssueCommandType: bool,
                             checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUnloadWithOrWithoutTarget(self_: *mut Unit,
                                             checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUnloadAtPosition(self_: *mut Unit, targDropPos: Position,
                                    checkCanIssueCommandType: bool,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUnload(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUnload_Unit(self_: *mut Unit, targetUnit: *mut Unit,
                               checkCanTargetUnit: bool, checkPosition: bool,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUnloadAll(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUnloadAllPosition(self_: *mut Unit,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUnloadAllPosition_Position(self_: *mut Unit,
                                              targDropPos: Position,
                                              checkCanIssueCommandType: bool,
                                              checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRightClick(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRightClick_Position(self_: *mut Unit, target: Position,
                                       checkCanTargetUnit: bool,
                                       checkCanIssueCommandType: bool,
                                       checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClick_Unit(self_: *mut Unit, target: *mut Unit,
                                   checkCanTargetUnit: bool,
                                   checkCanIssueCommandType: bool,
                                   checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickGrouped(self_: *mut Unit,
                                     checkCommandibilityGrouped: bool,
                                     checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickGrouped_Position(self_: *mut Unit,
                                              target: Position,
                                              checkCanTargetUnit: bool,
                                              checkCanIssueCommandType: bool,
                                              checkCommandibilityGrouped:
                                                  bool,
                                              checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRightClickGrouped_Unit(self_: *mut Unit, target: *mut Unit,
                                          checkCanTargetUnit: bool,
                                          checkCanIssueCommandType: bool,
                                          checkCommandibilityGrouped: bool,
                                          checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickPosition(self_: *mut Unit,
                                      checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickPositionGrouped(self_: *mut Unit,
                                             checkCommandibilityGrouped: bool,
                                             checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRightClickUnit(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canRightClickUnit_Unit(self_: *mut Unit,
                                       targetUnit: *mut Unit,
                                       checkCanTargetUnit: bool,
                                       checkCanIssueCommandType: bool,
                                       checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickUnitGrouped(self_: *mut Unit,
                                         checkCommandibilityGrouped: bool,
                                         checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canRightClickUnitGrouped_Unit(self_: *mut Unit,
                                              targetUnit: *mut Unit,
                                              checkCanTargetUnit: bool,
                                              checkCanIssueCommandType: bool,
                                              checkCommandibilityGrouped:
                                                  bool,
                                              checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canHaltConstruction(self_: *mut Unit,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canCancelConstruction(self_: *mut Unit,
                                      checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canCancelAddon(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canCancelTrain(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canCancelTrainSlot(self_: *mut Unit,
                                   checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canCancelMorph(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canCancelResearch(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canCancelUpgrade(self_: *mut Unit, checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUseTechWithOrWithoutTarget(self_: *mut Unit,
                                              checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canUseTechWithOrWithoutTarget_TechType(self_: *mut Unit,
                                                       tech: TechType,
                                                       checkCanIssueCommandType:
                                                           bool,
                                                       checkCommandibility:
                                                           bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTech_Position(self_: *mut Unit, tech: TechType,
                                    target: Position,
                                    checkCanTargetUnit: bool,
                                    checkTargetsType: bool,
                                    checkCanIssueCommandType: bool,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTech_Unit(self_: *mut Unit, tech: TechType,
                                target: *mut Unit, checkCanTargetUnit: bool,
                                checkTargetsType: bool,
                                checkCanIssueCommandType: bool,
                                checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTechWithoutTarget(self_: *mut Unit, tech: TechType,
                                        checkCanIssueCommandType: bool,
                                        checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTechUnit(self_: *mut Unit, tech: TechType,
                               checkCanIssueCommandType: bool,
                               checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTechUnit_Unit(self_: *mut Unit, tech: TechType,
                                    targetUnit: *mut Unit,
                                    checkCanTargetUnit: bool,
                                    checkTargetsUnits: bool,
                                    checkCanIssueCommandType: bool,
                                    checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTechPosition(self_: *mut Unit, tech: TechType,
                                   checkCanIssueCommandType: bool,
                                   checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canUseTechPosition_Position(self_: *mut Unit, tech: TechType,
                                            target: Position,
                                            checkTargetsPositions: bool,
                                            checkCanIssueCommandType: bool,
                                            checkCommandibility: bool)
     -> bool;
}
extern "C" {
    pub fn Unit_canPlaceCOP(checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Unit_canPlaceCOP_TilePosition(self_: *mut Unit,
                                         target: TilePosition,
                                         checkCanIssueCommandType: bool,
                                         checkCommandibility: bool) -> bool;
}
extern "C" {
    pub fn Bullet_getID(self_: *mut Bullet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bullet_exists(self_: *mut Bullet) -> bool;
}
extern "C" {
    pub fn Bullet_getPlayer(self_: *mut Bullet) -> *mut Player;
}
extern "C" {
    pub fn Bullet_getType(self_: *mut Bullet) -> BulletType;
}
extern "C" {
    pub fn Bullet_getSource(self_: *mut Bullet) -> *mut Unit;
}
extern "C" {
    pub fn Bullet_getPosition(self_: *mut Bullet) -> Position;
}
extern "C" {
    pub fn Bullet_getAngle(self_: *mut Bullet) -> f64;
}
extern "C" {
    pub fn Bullet_getVelocityX(self_: *mut Bullet) -> f64;
}
extern "C" {
    pub fn Bullet_getVelocityY(self_: *mut Bullet) -> f64;
}
extern "C" {
    pub fn Bullet_getTarget(self_: *mut Bullet) -> *mut Unit;
}
extern "C" {
    pub fn Bullet_getTargetPosition(self_: *mut Bullet) -> Position;
}
extern "C" {
    pub fn Bullet_getRemoveTimer(self_: *mut Bullet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bullet_isVisible(self_: *mut Bullet, player: *mut Player) -> bool;
}
extern "C" {
    pub fn Region_getID(self_: *mut Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getRegionGroupID(self_: *mut Region)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getCenter(self_: *mut Region) -> Position;
}
extern "C" {
    pub fn Region_isHigherGround(self_: *mut Region) -> bool;
}
extern "C" {
    pub fn Region_getDefensePriority(self_: *mut Region)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_isAccessible(self_: *mut Region) -> bool;
}
extern "C" {
    pub fn Region_getBoundsLeft(self_: *mut Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getBoundsTop(self_: *mut Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getBoundsRight(self_: *mut Region) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getBoundsBottom(self_: *mut Region)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Region_getClosestAccessibleRegion(self_: *mut Region)
     -> *mut Region;
}
extern "C" {
    pub fn Region_getClosestInaccessibleRegion(self_: *mut Region)
     -> *mut Region;
}
extern "C" {
    pub fn Region_getDistance(self_: *mut Region, other: *mut Region)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn String_new(data: *const ::std::os::raw::c_char, len: usize)
     -> *mut String;
}
extern "C" {
    pub fn String_data(self_: *const String) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn String_len(self_: *const String) -> usize;
}
extern "C" {
    pub fn String_release(self_: *mut String);
}
